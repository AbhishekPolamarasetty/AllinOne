<<<<<<< HEAD
instances created using terraform need to give security group rules i.e need to provide ssh security rule to connect to awscli
sudo apt update on anisble master and host
sudo apt install software-properties-common -y on master
sudo apt-add-repository ppa:ansible/ansible
sudo apt update
sudo apt install ansible -y

on hosts
sudo apt-get update
sudo apt-get install python3


master
ssh ubuntu@<ip-address of hosts> enter yes and then permission denied
cd .ssh  --> authorized_keys  known_hosts

known_hosts --> the ip address the slave is stored 
authorized_keys --> there need to be an encrypted code
ssh-keygen --> ls --> id_rsa id_rsa.pub is added with the above two files
cat id_rsa.pub --> copy the encrypted code

now hosts
cd .ssh
vi authorized_keys
paste the id_rsa.pub key generated in master 

on master ssh ubuntu@<ip-address of host>


settingup ansible host and test connection

master
sudo nano /etc/ansible/hosts
[production]  #group name
host1 ansible_ssh_host=<ip-address>

ansible -m ping all 
ansible -m ping <groupname>
ansible -m ping <hostname>


need of installing python in ansible hosts---------

Installing Python on the target (host) instances is a prerequisite for using Ansible to manage those instances. Ansible uses Python to communicate and execute tasks remotely on the target machines.

Here's why installing Python is necessary:

Ansible Utilizes Python: Ansible communicates with target machines using SSH and executes tasks via Python. It doesn't rely on agents but instead utilizes Python's SSH libraries (paramiko and OpenSSH) to connect to remote hosts. Therefore, Python must be available on the target machines for Ansible to function properly.

Interpreter for Ansible Modules: Ansible modules are written in Python. These modules are the building blocks of tasks in Ansible playbooks. When Ansible runs tasks on remote hosts, it copies these modules temporarily to the host and executes them using the Python interpreter.

Default on Many Systems: Python 2.x is often pre-installed on many Linux distributions, but some newer systems may have only Python 3.x by default. If Python is missing or if the default version is different, Ansible might not be able to execute its tasks.

Regarding ssh-keygen ---------

The ssh-keygen command is used to generate SSH key pairs, typically consisting of a public key and a private key. These keys are used for authentication and secure communication between systems over SSH (Secure Shell).
by default rsa keypair is generated (one public(remotely) and one private key(locally))
by default these are stored in .ssh folder with id_rsa(private) and id_rsa.pub(public)
ssh-keygen -t rsa (to specify type of key pair)
ssh-keygen -t rsa -f /path/to/your_file_name (to specify path and file name)

regarding sudo apt install software-properties-common---
The add-apt-repository command, provided by software-properties-common, is particularly helpful when you want to install software not available in the standard Ubuntu repositories. For instance, if you want to install software maintained in a PPA or from a third-party repository, using add-apt-repository simplifies the process by handling the addition of these repositories to your system's package manager.

Regarding sudo apt-add-repository ppa:ansible/ansible ---

The command sudo add-apt-repository ppa:ansible/ansible is used to add the Ansible PPA (Personal Package Archive) to your system's list of software repositories on Ubuntu or other Debian-based systems. This step is necessary to install Ansible on systems that might not have Ansible available in their default repositories or need a more recent version than what's provided by the default repositories.
PPA(Personal Package Archive)

to check ansible is present in default repository or not  ---
sudo apt update
apt-cache policy ansible

without the above steps also we can easily install ansible using
sudo apt update
sudo apt-get install ansible (but the latest version is not installed)  

Agent-less
Ansible is agentless, which means the nodes it manages do not require any software to be installed on them. 
Ansible reads information about which machines you want to manage from your inventory.

inventory - can be in ini or yaml format (yaml is preferred if number of managed nodes increases)
Using an inventory file, Ansible can manage a large number of hosts with a single command.
ansible-inventory -i inventory.ini --list  -- to verify the inventory
ansible myhosts -m ping -i inventory.ini -- to ping to myhosts group

what(db,web,leaf,spine) --> where(location->datacenter1,region_A,datacenter2) --> when(stage-> development,production,test,staging)
Database (db) hosts: These are servers specifically dedicated to hosting databases.
Web hosts: These servers are designed to host web applications or websites.
Leaf and spine hosts: These might be used in a network infrastructure, with leaf switches connecting endpoints and spine switches 
providing high-speed connectivity between leaf switches.
hosts:
  - name: DBHost1
    type: db
    location: datacenter1
    stage: production

  - name: WebHost1
    type: web
    location: region_A
    stage: production

  - name: LeafHost1
    type: leaf
    location: datacenter2
    stage: test

  - name: SpineHost1
    type: spine
    location: datacenter1
    stage: staging

  - name: DBHost2
    type: db
    location: datacenter2
    stage: development
Create a metagroup that organizes multiple groups in your inventory with the following syntax:
metagroupname: #can be anyname like Network
  children:

Playbook ----- (YAML file)
Playbooks are automation blueprints, in YAML format, that Ansible uses to deploy and configure managed nodes.

Playbook
A list of plays that define the order in which Ansible performs operations, from top to bottom, to achieve an overall goal.

Play
An ordered list of tasks that maps to managed nodes in an inventory.

Task
A list of one or more modules that defines the operations that Ansible performs.

Module
A unit of code or binary that Ansible runs on managed nodes. Ansible modules are grouped in collections with a Fully Qualified Collection Name (FQCN) for each module.

- name: My first play  # play
  hosts: myhosts #group name in inventory
  tasks:  #tasks
   - name: Ping my hosts
     ansible.builtin.ping:

   - name: Print message
     ansible.builtin.debug:
      msg: Hello world
 
ansible-playbook -i inventory.ini playbook.yaml - to run playbook

sudo hostnamectl set-hostname newhostname  - for changing hostname


inventory 
by default ansible creates two groups all and ungrouped
all and ungrouped or all and some other group 
every host will always belongs to atleast two groups
Groups can have multiple parents and children, but not circular relationships.Hosts can also be in multiple groups, but there will only be one instance of a host at runtime. Ansible merges the data from multiple groups

...
  webservers:
    hosts:
      www[01:50].example.com:
output - www01.example.com
         www02.example.com and soon till www50.example.com
dynamic inventory - inventory plugins and inventory scripts


patterns --
When you execute Ansible through an ad hoc command or by running a playbook, you must choose which managed nodes or groups you want to execute against. Patterns let you run commands and playbooks against specific hosts and/or groups in your inventory.
ansible <pattern> -m <module_name> -a "<module options>"

hosts.yml
all:
  hosts:
    server1.example.com:
      ansible_user: user1
      environment: dev
    server2.example.com:
      ansible_user: user2
      environment: prod
playbook.yml
- name: Example playbook with patterns
  hosts: dev_servers  # Using a group name as a pattern

  tasks:
    - name: Task 1 for dev servers
      ansible.builtin.command: echo "This is executed on dev servers"
ansible-playbook -i hosts.yml playbook.yml
 

You can change the behavior of the patterns defined in ad-hoc commands using command-line options. 
You can also limit the hosts you target on a particular run with the --limit flag.

$ ansible all -m <module> -a "<module options>" --limit "host1,host2"


ansible-doc yum -- command for documentation of each modules

ansible-doc -l -- for listing al avialable modules 

ansible -i inventory.yaml all -m apt -a "update_cache=yes" -b

ansible -i inventory.yaml all -m apt -a "name=nginx state=present" -b
-b for escalate privilages

ansible -i inventory.yaml all -m "shell" -a "touch f1"
ansible -i inventory.yaml all -m ping 



ansible-playbook -i inventory.yaml playbook.yaml --limit=my_hosts1
state: present --> installing
state: absent --> uninstalling



ansible-galaxy collection install community.general

Abhishek Veeramala (Day14 & Day15)
ansible uses python language
it supports both linux and windows.for linux in uses SSH protocol and for Windows it uses winRM protocol
ansible uses push mechanism
yaml for writing playbooks


ssh <private-ipaddress>
ansible adhoc commands (used for executing one or two tasks using ansible on master )
anssible -i inventory all -m "shell" -a "touch devopsclass"
adhoc vs playbooks

-m stands for modules 
-a stands for what command need to be executed

ansible -i inventory webserver -m "shell" -a "df"
here webserver is the group name mentioned in inventory file

vim playbook.yml
--- (indicates this is a yaml file)
- name : install and start nginx
 hosts: all (all servers in inventory files are executed)
 become: root(run ansible as a root user) or become_user is used for providing custom users
 
 tasks:
  - name: install nginx
    shell: apt install nginx or
    apt: 
      name: nginx
      state: present
  -name: start nginx
   shell: systemctl start nginx or
   service:
      name: nginx
      state: started
       

- indicates there can be list of playbooks
--> ansible-playbook -i inventory first-playbook.yaml
--> ansible-playbook -v -i inventory first-playbook.yaml
   -v verbose (provides entire information regarding what the ansible is doing internally)

ansible roles - efficient way of writing playbooks that will improve efficiency of writing complex playbooks
ansible-galaxy role init kubernetes --> a kubernetes folder is created and inside that there many folders like templates,files,tasks,handlers,tests,vars,meta



=======
instances created using terraform need to give security group rules i.e need to provide ssh security rule to connect to awscli
sudo apt update on anisble master and host
sudo apt install software-properties-common on master
sudo apt-add-repository ppa:ansible/ansible
sudo apt update
sudo apt install ansible

on hosts
sudo apt-get update
sudo apt-get install python3


master
ssh ubuntu@<ip-address of hosts> enter yes and then permission denied
cd .ssh  --> authorized_keys  known_hosts

known_hosts --> the ip address the slave is stored 
authorized_keys --> there need to be an encrypted code
ssh-keygen --> ls --> id_rsa id_rsa.pub is added with the above two files
cat id_rsa.pub --> copy the encrypted code

now hosts
cd .ssh
vi authorized_keys
paste the id_rsa.pub key generated in master 

on master ssh ubuntu@<ip-address of host>


settingup ansible host and test connection

master
sudo nano /etc/ansible/hosts
[production]  #group name
host1 ansible_ssh_host=<ip-address>

ansible -m ping all 
ansible -m ping <groupname>
ansible -m ping <hostname>


need of installing python in ansible hosts---------

Installing Python on the target (host) instances is a prerequisite for using Ansible to manage those instances. Ansible uses Python to communicate and execute tasks remotely on the target machines.

Here's why installing Python is necessary:

Ansible Utilizes Python: Ansible communicates with target machines using SSH and executes tasks via Python. It doesn't rely on agents but instead utilizes Python's SSH libraries (paramiko and OpenSSH) to connect to remote hosts. Therefore, Python must be available on the target machines for Ansible to function properly.

Interpreter for Ansible Modules: Ansible modules are written in Python. These modules are the building blocks of tasks in Ansible playbooks. When Ansible runs tasks on remote hosts, it copies these modules temporarily to the host and executes them using the Python interpreter.

Default on Many Systems: Python 2.x is often pre-installed on many Linux distributions, but some newer systems may have only Python 3.x by default. If Python is missing or if the default version is different, Ansible might not be able to execute its tasks.

Regarding ssh-keygen ---------

The ssh-keygen command is used to generate SSH key pairs, typically consisting of a public key and a private key. These keys are used for authentication and secure communication between systems over SSH (Secure Shell).
by default rsa keypair is generated (one public(remotely) and one private key(locally))
by default these are stored in .ssh folder with id_rsa(private) and id_rsa.pub(public)
ssh-keygen -t rsa (to specify type of key pair)
ssh-keygen -t rsa -f /path/to/your_file_name (to specify path and file name)

regarding sudo apt install software-properties-common---
The add-apt-repository command, provided by software-properties-common, is particularly helpful when you want to install software not available in the standard Ubuntu repositories. For instance, if you want to install software maintained in a PPA or from a third-party repository, using add-apt-repository simplifies the process by handling the addition of these repositories to your system's package manager.

Regarding sudo apt-add-repository ppa:ansible/ansible ---

The command sudo add-apt-repository ppa:ansible/ansible is used to add the Ansible PPA (Personal Package Archive) to your system's list of software repositories on Ubuntu or other Debian-based systems. This step is necessary to install Ansible on systems that might not have Ansible available in their default repositories or need a more recent version than what's provided by the default repositories.
PPA(Personal Package Archive)

to check ansible is present in default repository or not  ---
sudo apt update
apt-cache policy ansible

without the above steps also we can easily install ansible using
sudo apt update
sudo apt-get install ansible (but the latest version is not installed)  

Agent-less
Ansible is agentless, which means the nodes it manages do not require any software to be installed on them. 
Ansible reads information about which machines you want to manage from your inventory.

inventory - can be in ini or yaml format (yaml is preferred if number of managed nodes increases)
Using an inventory file, Ansible can manage a large number of hosts with a single command.
ansible-inventory -i inventory.ini --list  -- to verify the inventory
ansible myhosts -m ping -i inventory.ini -- to ping to myhosts group

what(db,web,leaf,spine) --> where(location->datacenter1,region_A,datacenter2) --> when(stage-> development,production,test,staging)
Database (db) hosts: These are servers specifically dedicated to hosting databases.
Web hosts: These servers are designed to host web applications or websites.
Leaf and spine hosts: These might be used in a network infrastructure, with leaf switches connecting endpoints and spine switches 
providing high-speed connectivity between leaf switches.
hosts:
  - name: DBHost1
    type: db
    location: datacenter1
    stage: production

  - name: WebHost1
    type: web
    location: region_A
    stage: production

  - name: LeafHost1
    type: leaf
    location: datacenter2
    stage: test

  - name: SpineHost1
    type: spine
    location: datacenter1
    stage: staging

  - name: DBHost2
    type: db
    location: datacenter2
    stage: development
Create a metagroup that organizes multiple groups in your inventory with the following syntax:
metagroupname: #can be anyname like Network
  children:

Playbook ----- (YAML file)
Playbooks are automation blueprints, in YAML format, that Ansible uses to deploy and configure managed nodes.

Playbook
A list of plays that define the order in which Ansible performs operations, from top to bottom, to achieve an overall goal.

Play
An ordered list of tasks that maps to managed nodes in an inventory.

Task
A list of one or more modules that defines the operations that Ansible performs.

Module
A unit of code or binary that Ansible runs on managed nodes. Ansible modules are grouped in collections with a Fully Qualified Collection Name (FQCN) for each module.

- name: My first play  # play
  hosts: myhosts #group name in inventory
  tasks:  #tasks
   - name: Ping my hosts
     ansible.builtin.ping:

   - name: Print message
     ansible.builtin.debug:
      msg: Hello world
 
ansible-playbook -i inventory.ini playbook.yaml - to run playbook

sudo hostnamectl set-hostname newhostname  - for changing hostname


inventory 
by default ansible creates two groups all and ungrouped
all and ungrouped or all and some other group 
every host will always belongs to atleast two groups
Groups can have multiple parents and children, but not circular relationships.Hosts can also be in multiple groups, but there will only be one instance of a host at runtime. Ansible merges the data from multiple groups

...
  webservers:
    hosts:
      www[01:50].example.com:
output - www01.example.com
         www02.example.com and soon till www50.example.com
dynamic inventory - inventory plugins and inventory scripts


patterns --
When you execute Ansible through an ad hoc command or by running a playbook, you must choose which managed nodes or groups you want to execute against. Patterns let you run commands and playbooks against specific hosts and/or groups in your inventory.
ansible <pattern> -m <module_name> -a "<module options>"

hosts.yml
all:
  hosts:
    server1.example.com:
      ansible_user: user1
      environment: dev
    server2.example.com:
      ansible_user: user2
      environment: prod
playbook.yml
- name: Example playbook with patterns
  hosts: dev_servers  # Using a group name as a pattern

  tasks:
    - name: Task 1 for dev servers
      ansible.builtin.command: echo "This is executed on dev servers"
ansible-playbook -i hosts.yml playbook.yml
 

You can change the behavior of the patterns defined in ad-hoc commands using command-line options. 
You can also limit the hosts you target on a particular run with the --limit flag.

$ ansible all -m <module> -a "<module options>" --limit "host1,host2"


ansible-doc yum -- command for documentation of each modules

ansible-doc -l -- for listing al avialable modules 

ansible -i inventory.yaml all -m apt -a "name=nginx state=present" -o
-b for escalate privilages

ansible -i inventory.yaml all -m "shell" -a "touch f1"
ansible -i inventory.yaml all -m ping 



ansible-playbook -i inventory.yaml playbook.yaml --limit=my_hosts1
state: present --> installing
state: absent --> uninstalling



ansible-galaxy collection install community.general

Abhishek Veeramala (Day14 & Day15)
ansible uses python language
it supports both linux and windows.for linux in uses SSH protocol and for Windows it uses winRM protocol
ansible uses push mechanism
yaml for writing playbooks


ssh <private-ipaddress>
ansible adhoc commands (used for executing one or two tasks using ansible on master )
anssible -i inventory all -m "shell" -a "touch devopsclass"
adhoc vs playbooks

-m stands for modules 
-a stands for what command need to be executed

ansible -i inventory webserver -m "shell" -a "df"
here webserver is the group name mentioned in inventory file

vim playbook.yml
--- (indicates this is a yaml file)
- name : install and start nginx
 hosts: all (all servers in inventory files are executed)
 become: root(run ansible as a root user) or become_user is used for providing custom users
 
 tasks:
  - name: install nginx
    shell: apt install nginx or
    apt: 
      name: nginx
      state: present
  -name: start nginx
   shell: systemctl start nginx or
   service:
      name: nginx
      state: started
       

- indicates there can be list of playbooks
--> ansible-playbook -i inventory first-playbook.yaml
--> ansible-playbook -v -i inventory first-playbook.yaml
   -v verbose (provides entire information regarding what the ansible is doing internally)

ansible roles - efficient way of writing playbooks that will improve efficiency of writing complex playbooks
ansible-galaxy role init kubernetes --> a kubernetes folder is created and inside that there many folders like templates,files,tasks,handlers,tests,vars,meta



>>>>>>> 5742c1ff2cf79ab3b7360ff86f6df8be7e626e5c
